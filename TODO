until at latest Saturday

OP BigStep add missing steps, complete big <-> small conversions, update soundness/complete proof (split assignment rule)

MV Solve if Hoare triple theorem problem (how????)


  Report
  Presentation

Presentation notes:
  Our term language
  Heap-related semantics
  Simple-Typed lambda calculus (failed) experiment
  Correctness by construction
  Adding exceptions/errors to the language
  Proofs we did
    elem proof decidability
    function application problem
  Hoare Triple stuff
    side-effects in condition
    errors in the semantics

==========================
DONE:
==========================
PH What happens if Hoare Predicate are Value -> Heap -> Bool ?
PH Create module pulling in everything else to detect compile errors
   Add sequencing to the language
MV Add Hoare Triples
OP Splitting the proofs into smaller files
PH The replace view function should take a natural number as index, update big <-> small (and proofs?) conversions accordingly
PH Add Elem definitions
-- until Thursday
OP  Adapt BigStep and check if they still work

PH  Split types into Basic/Ref types
PH  Restrict Heap to basic types
MV  Use Maybe for denotational semantics
-- try as far as we get, as time permits
MV  Evaluation function
PH  progress + preservation proof with SmallStep
PH  Index terms by one Shape
MV  Convert Heap to value data type
MV  Move common functions to a utility module
OP  BigStep semantics (fix issues, see comments, reuse existing proofs etc.)


1. We need values in the heap (or isValue etc.), otherwise non-terminating [[]] def.
2. The ref value contains an arbitrary shape. If Value is not indexed on the Shape,
   we cannot relate the ref to anything else anymore.
   We could index values by Shape. Is this really a good idea? Does it actually work? (PH will try it out)
   Maybe something like Closed indexed by Shape works? (MV will try it out)
   Should we have a Value datatype, isValue, Closed...? (we need values for BigStep/Denotational Semantics)




MV  Remove Aliasing stuff

    Maybe remove isValue proof from heap, instead prove that all insert/replace steps only insert values into the heap


- First use simple BoolNat language with references, port to Lambda calculus later


Order of evaluation:

  apply: reduce lhs until it's a closure, then reduce rhs, then apply

Term: indexed by Shape (and Context for Lambda version)







Since we don't have bindings (variables) it does not make much sense to have
aliasing (just increases the number of rules)

I am still dubious about ref.
Why exactly do we need it? What is the advantage?
If it allows to express something new then it's ok,
but if assuming that the Elem objects are anywhere you need would work
I would probably leave it out.



at latest Wednesday before PV

MV    look at isPrefix stuff
PH    Should we encode Elem proofs in ref
OP    finish missing small step semantics


Primitives 
  Unit
 
See pg 160 - 161
Values
Terms 


References (At the moment contains only unit)
Heap (List) and references are indeces
Context (De Bruijn indeces)

Semantics:
  Small Step
  Big Step
  Denotational Semantics

Based on what he wants us to proof choose the best.

Properties
  Progress - Preservation
  Completness - Soundness

Are they indipendent properties?

Steps:
0) Define datatypes Values Terms Context and Heap [MV]
      Use GADTs to encode only well type terms
   Semantics [PH]
   Prove Properties (Progress - Preservation) [OP]
   
1) General type in references
2) Ask wouter
